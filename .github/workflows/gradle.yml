name: Java CI
on:
  push:
    branches:
      - '[4-9]+.[0-9]+.x'
      - '[3-9]+.[3-9]+.x'
  pull_request:
    branches:
      - '[4-9]+.[0-9]+.x'
      - '[3-9]+.[3-9]+.x'      
  workflow_dispatch:
env:
  GIT_USER_NAME: grails-build
  GIT_USER_EMAIL: grails-build@users.noreply.github.com

jobs:
  core-tests:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v2
      - uses: actions/setup-java@v4
        with: { java-version: 17, distribution: temurin }
      - name: Run Tests
        uses: gradle/actions/setup-gradle@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
        with:
          arguments: |
            check 
            --refresh-dependencies
            -Dgeb.env=chromeHeadless

  functional-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-config: [ 'static', 'annotation', 'requestmap', 'basic', 'basicCacheUsers', 'misc', 'putWithParams', 'bcrypt', 'issue503' ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { java-version: 17, distribution: temurin }
      - name: Run Tests
        uses: gradle/actions/setup-gradle@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
        with:
          arguments: |
            examples-functional-test-app:check 
            -Dgeb.env=chromeHeadless 
            -DTESTCONFIG=${{ matrix.test-config }}

  build:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v2
      - uses: actions/setup-java@v4
        with: { java-version: 17, distribution: temurin }
      - name: Run Build
        id: build
        uses: gradle/actions/setup-gradle@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
        with:
          arguments: |
            spring-security-core:build 
            --refresh-dependencies
            -Dgeb.env=chromeHeadless
            -x javadoc

      - name: Publish Snapshot artifacts to Artifactory (repo.grails.org)
        uses: gradle/actions/setup-gradle@v3
        if: success()
        env:
          ORG_GRADLE_PROJECT_artifactoryUsername: ${{ secrets.ARTIFACTORY_USERNAME }}
          ORG_GRADLE_PROJECT_artifactoryPassword: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
        with:
          arguments: |
            -Dorg.gradle.internal.publish.checksums.insecure=true 
            spring-security-core:publish
            -x javadoc            

      - name: Generate Snapshot Documentation
        if: success()
        uses: gradle/actions/setup-gradle@v3
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
        with:
          arguments: spring-security-core:docs

      - name: Publish Snapshot Documentation to Github Pages
        if: success()
        uses: micronaut-projects/github-pages-deploy-action@grails
        env:
          BRANCH: gh-pages
          COMMIT_EMAIL: ${{ env.GIT_USER_EMAIL }}
          COMMIT_NAME: ${{ env.GIT_USER_NAME }}
          FOLDER: plugin/build/docs
          GH_TOKEN: ${{ secrets.GH_TOKEN }}