package ${packageName}

import groovy.transform.EqualsAndHashCode
import groovy.transform.ToString
import grails.plugin.springsecurity.SpringSecurityService
import grails.compiler.GrailsCompileStatic
import groovy.transform.CompileDynamic

@GrailsCompileStatic
@EqualsAndHashCode(includes='username')
@ToString(includes='username', includeNames=true, includePackage=false)
class ${userClassName} implements Serializable {

	private static final long serialVersionUID = 1

	SpringSecurityService springSecurityService

	String username
	String password
	boolean enabled = true
	boolean accountExpired
	boolean accountLocked
	boolean passwordExpired

	Set<${groupClassName ?: roleClassName}> getAuthorities() {
		(${userClassName}${groupClassName ?: roleClassName}.findAllBy${userClassName}(this) as List<${userClassName}${groupClassName ?: roleClassName}>)*.${groupClassProperty ?: roleClassProperty} as Set<${groupClassName ?: roleClassName}>
	}

	def beforeInsert() {
		encodePassword()
	}

	def beforeUpdate() {
		if (isDirty('password')) {
			encodePassword()
		}
	}

    protected void encodePassword() {
		password = springSecurityService?.passwordEncoder ? springSecurityService.encodePassword(password, salt()) : password
	}

    @CompileDynamic
	def salt() {
		if ( !springSecurityService ) {
			return null
		}
		def algorithm = springSecurityService.grailsApplication.config.getProperty('grails.plugin.springsecurity.password.algorithm')
		if ( algorithm == 'bcrypt' || algorithm == 'pbkdf2' ) {
			return null
		}

		def reflectionSaltProperty = springSecurityService.grailsApplication.config.getProperty('grails.plugin.springsecurity.dao.reflectionSaltSourceProperty')
		if ( reflectionSaltProperty ) {
			return getProperty(reflectionSaltProperty)
		}
		null
	}

	static transients = ['springSecurityService']

	static constraints = {
		password nullable: false, blank: false, password: true
		username nullable: false, blank: false, unique: true
	}

	static mapping = {
	    ${'User' == userClassName ? "table name: '`user`'" : ''}
		password column: '`password`'
	}
}
