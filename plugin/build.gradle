buildscript {
	repositories {
		maven { url 'https://repo.grails.org/grails/core' }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsVersion"
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.6.1'
		classpath 'org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6'
		classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
	}
}

group = 'org.grails.plugins'
version = project.projectVersion

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.grails.grails-gsp'
apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg"
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext.pomInfo = {
	delegate.name "Grails spring-security-core plugin"
	delegate.description 'The Spring Security plugin simplifies the integration of Spring Security into GrailsÂ® framework applications.'
	delegate.url project.hasProperty('vcsUrl') ? project.vcsUrl : "https://github.com/grails-plugins/$project.name"

	delegate.licenses {
		delegate.license {
			delegate.name 'The Apache Software License, Version 2.0'
			delegate.url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
			delegate.distribution 'repo'
		}
	}

	delegate.scm {
		delegate.url "scm:git@github.com:${githubSlug}.git"
		delegate.connection "scm:git@github.com:${githubSlug}.git"
		delegate.developerConnection "scm:git@github.com:${githubSlug}.git"
	}

	if (developers) {
		delegate.developers {
			for (dev in developers.split(',')) {
				delegate.developer {
					delegate.id dev.toLowerCase().replace(' ', '')
					delegate.name dev
				}
			}
		}
	}
}

repositories {
	maven { url 'https://repo.grails.org/grails/core' }
}

sourceCompatibility = targetCompatibility = 1.8

dependencies {
	api "javax.servlet:javax.servlet-api:$javaxServletApiVersion"
	api 'org.grails:grails-dependencies'
	api 'org.grails:grails-web-boot'
	api 'org.springframework.boot:spring-boot-starter-logging'
	api "net.sf.ehcache:ehcache:$ehcacheVersion"
	api "org.springframework.security:spring-security-core:$springSecurityVersion", {
		['spring-aop', 'spring-beans', 'spring-context', 'spring-core', 'spring-expression'].each {
			exclude module: it
		}
	}
	api "org.springframework.security:spring-security-web:$springSecurityVersion", {
		exclude module: 'spring-web'
	}

	testImplementation "org.grails:grails-gorm-testing-support:$grailsTestingSupportVersion"
	testImplementation "org.grails:grails-web-testing-support:$grailsTestingSupportVersion"
	testRuntimeOnly 'cglib:cglib-nodep:3.3.0'
}

tasks.named("compileGroovyPages").configure {
	classpath += configurations.compileClasspath
}

apply from: "${rootProject.projectDir}/gradle/docs.gradle"
apply from: "${rootProject.projectDir}/gradle/cleanBuild.gradle"
apply from: "${rootProject.projectDir}/gradle/testVerbose.gradle"

publishing {
	if (isSnapshot) {
		repositories {
			maven {
				credentials {
					def u = System.getenv("ARTIFACTORY_USERNAME") ?: project.hasProperty("artifactoryPublishUsername") ? project.artifactoryPublishUsername : ''
					def p = System.getenv("ARTIFACTORY_PASSWORD") ?: project.hasProperty("artifactoryPublishPassword") ? project.artifactoryPublishPassword : ''
					username = u
					password = p
				}
				url "https://repo.grails.org/grails/plugins3-snapshots-local"
			}
		}
	}

	publications {
		maven(MavenPublication) {
			artifactId project.name
			from components.java

			artifact sourcesJar
			artifact javadocJar
			artifact source: "${buildDir}/classes/groovy/main/META-INF/grails-plugin.xml",
					classifier: "plugin",
					extension: 'xml'
			pom.withXml {
				def xml = asNode()

				xml.children().last() + pomInfo
				// dependency management shouldn't be included
				def n = xml.get("dependencyManagement")
				if (n)
					xml.remove(n)
			}

		}
	}
}

signing {
	sign publishing.publications.maven
}

tasks.withType(Sign) {
	onlyIf { isReleaseVersion }
}
